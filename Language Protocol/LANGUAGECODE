class MultiLanguageAI:
    def __init__(self):
        # Supported languages and their characteristics
        self.languages = {
            "Python": {"file_extension": ".py", "paradigm": "interpreted, dynamic"},
            "Rust": {"file_extension": ".rs", "paradigm": "compiled, systems programming"},
            "Go": {"file_extension": ".go", "paradigm": "compiled, concurrent"},
            "TypeScript": {"file_extension": ".ts", "paradigm": "typed, web development"},
            "Next.js": {"framework": True, "paradigm": "React-based web framework"},
        }

    def detect_language(self, code_snippet):
        """Detect the programming language based on syntax patterns."""
        if "def " in code_snippet and "import " in code_snippet:
            return "Python"
        elif "fn " in code_snippet and "let " in code_snippet:
            return "Rust"
        elif "package " in code_snippet and "func " in code_snippet:
            return "Go"
        elif "const " in code_snippet and "interface " in code_snippet:
            return "TypeScript"
        elif "export default function" in code_snippet and "getStaticProps" in code_snippet:
            return "Next.js"
        else:
            return "Unknown"

    def explain_code(self, code_snippet, language=None):
        """Explain the code based on its language."""
        if not language:
            language = self.detect_language(code_snippet)
        if language == "Python":
            return "This appears to be Python code. It's likely using dynamic typing and may rely on modules or libraries."
        elif language == "Rust":
            return "This is Rust code. Rust is known for its safety and ownership system."
        elif language == "Go":
            return "This is Go code, designed for concurrency and simplicity in systems programming."
        elif language == "TypeScript":
            return "This is TypeScript code, which adds static typing to JavaScript for safer web development."
        elif language == "Next.js":
            return "This is a Next.js component or API code. Next.js is a React-based framework for server-side rendering."
        else:
            return "The language is unknown or not supported yet."

    def provide_boilerplate(self, language):
        """Provide a boilerplate code snippet for a given language."""
        boilerplates = {
            "Python": "def greet(name):\n    return f'Hello, {name}'\nprint(greet('World'))",
            "Rust": "fn main() {\n    println!(\"Hello, world!\");\n}",
            "Go": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, World!\")\n}",
            "TypeScript": "const greet = (name: string): string => {\n    return `Hello, ${name}`;\n};\nconsole.log(greet('World'));",
            "Next.js": "export default function Home() {\n    return <h1>Hello, World!</h1>;\n}",
        }
        return boilerplates.get(language, "No boilerplate available for this language.")

    def debug_code(self, code_snippet, language=None):
        """Debug a code snippet and provide suggestions."""
        if not language:
            language = self.detect_language(code_snippet)
        
        if language == "Python":
            return "Check for common Python errors like indentation issues or missing imports."
        elif language == "Rust":
            return "Ensure ownership rules are followed and types are explicitly defined where needed."
        elif language == "Go":
            return "Check for unused imports or variables, as Go is strict about them."
        elif language == "TypeScript":
            return "Verify type definitions and ensure proper module imports."
        elif language == "Next.js":
            return "Check for Next.js-specific errors like improper use of getStaticProps or dynamic routes."
        else:
            return "Cannot debug. Language not recognized."

    def assist(self, task, code_snippet="", language=None):
        """Assist the user with tasks like detecting, explaining, debugging, or generating code."""
        if task == "detect":
            return self.detect_language(code_snippet)
        elif task == "explain":
            return self.explain_code(code_snippet, language)
        elif task == "boilerplate":
            return self.provide_boilerplate(language)
        elif task == "debug":
            return self.debug_code(code_snippet, language)
        else:
            return "Unknown task. Please specify 'detect', 'explain', 'boilerplate', or 'debug'."

# Example Usage
ai_agent = MultiLanguageAI()

# Task: Detect language
python_code = "def greet(name):\n    return f'Hello, {name}'\nprint(greet('World'))"
print(f"Detected Language: {ai_agent.assist('detect', python_code)}")

# Task: Explain code
print(f"Explanation: {ai_agent.assist('explain', python_code)}")

# Task: Provide boilerplate for Rust
print(f"Boilerplate for Rust:\n{ai_agent.assist('boilerplate', language='Rust')}")

# Task: Debug code
go_code = "package main\nfunc main() {\n    fmt.Println(\"Hello, World!\")\n}"
print(f"Debugging Tips: {ai_agent.assist('debug', go_code, language='Go')}")
